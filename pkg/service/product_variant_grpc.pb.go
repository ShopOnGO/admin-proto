// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: product_variant.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductVariantService_CreateVariant_FullMethodName = "/proto.ProductVariantService/CreateVariant"
	ProductVariantService_UpdateVariant_FullMethodName = "/proto.ProductVariantService/UpdateVariant"
	ProductVariantService_DeleteVariant_FullMethodName = "/proto.ProductVariantService/DeleteVariant"
	ProductVariantService_GetVariant_FullMethodName    = "/proto.ProductVariantService/GetVariant"
	ProductVariantService_ListVariants_FullMethodName  = "/proto.ProductVariantService/ListVariants"
	ProductVariantService_ManageStock_FullMethodName   = "/proto.ProductVariantService/ManageStock"
)

// ProductVariantServiceClient is the client API for ProductVariantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductVariantServiceClient interface {
	CreateVariant(ctx context.Context, in *ProductVariant, opts ...grpc.CallOption) (*VariantResponse, error)
	UpdateVariant(ctx context.Context, in *ProductVariant, opts ...grpc.CallOption) (*VariantResponse, error)
	DeleteVariant(ctx context.Context, in *DeleteVariantRequest, opts ...grpc.CallOption) (*Error, error)
	GetVariant(ctx context.Context, in *VariantRequest, opts ...grpc.CallOption) (*VariantResponse, error)
	ListVariants(ctx context.Context, in *VariantListRequest, opts ...grpc.CallOption) (*VariantListResponse, error)
	ManageStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*Error, error)
}

type productVariantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductVariantServiceClient(cc grpc.ClientConnInterface) ProductVariantServiceClient {
	return &productVariantServiceClient{cc}
}

func (c *productVariantServiceClient) CreateVariant(ctx context.Context, in *ProductVariant, opts ...grpc.CallOption) (*VariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantResponse)
	err := c.cc.Invoke(ctx, ProductVariantService_CreateVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVariantServiceClient) UpdateVariant(ctx context.Context, in *ProductVariant, opts ...grpc.CallOption) (*VariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantResponse)
	err := c.cc.Invoke(ctx, ProductVariantService_UpdateVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVariantServiceClient) DeleteVariant(ctx context.Context, in *DeleteVariantRequest, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, ProductVariantService_DeleteVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVariantServiceClient) GetVariant(ctx context.Context, in *VariantRequest, opts ...grpc.CallOption) (*VariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantResponse)
	err := c.cc.Invoke(ctx, ProductVariantService_GetVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVariantServiceClient) ListVariants(ctx context.Context, in *VariantListRequest, opts ...grpc.CallOption) (*VariantListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariantListResponse)
	err := c.cc.Invoke(ctx, ProductVariantService_ListVariants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productVariantServiceClient) ManageStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*Error, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Error)
	err := c.cc.Invoke(ctx, ProductVariantService_ManageStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductVariantServiceServer is the server API for ProductVariantService service.
// All implementations must embed UnimplementedProductVariantServiceServer
// for forward compatibility.
type ProductVariantServiceServer interface {
	CreateVariant(context.Context, *ProductVariant) (*VariantResponse, error)
	UpdateVariant(context.Context, *ProductVariant) (*VariantResponse, error)
	DeleteVariant(context.Context, *DeleteVariantRequest) (*Error, error)
	GetVariant(context.Context, *VariantRequest) (*VariantResponse, error)
	ListVariants(context.Context, *VariantListRequest) (*VariantListResponse, error)
	ManageStock(context.Context, *StockRequest) (*Error, error)
	mustEmbedUnimplementedProductVariantServiceServer()
}

// UnimplementedProductVariantServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductVariantServiceServer struct{}

func (UnimplementedProductVariantServiceServer) CreateVariant(context.Context, *ProductVariant) (*VariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariant not implemented")
}
func (UnimplementedProductVariantServiceServer) UpdateVariant(context.Context, *ProductVariant) (*VariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariant not implemented")
}
func (UnimplementedProductVariantServiceServer) DeleteVariant(context.Context, *DeleteVariantRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariant not implemented")
}
func (UnimplementedProductVariantServiceServer) GetVariant(context.Context, *VariantRequest) (*VariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariant not implemented")
}
func (UnimplementedProductVariantServiceServer) ListVariants(context.Context, *VariantListRequest) (*VariantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariants not implemented")
}
func (UnimplementedProductVariantServiceServer) ManageStock(context.Context, *StockRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageStock not implemented")
}
func (UnimplementedProductVariantServiceServer) mustEmbedUnimplementedProductVariantServiceServer() {}
func (UnimplementedProductVariantServiceServer) testEmbeddedByValue()                               {}

// UnsafeProductVariantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductVariantServiceServer will
// result in compilation errors.
type UnsafeProductVariantServiceServer interface {
	mustEmbedUnimplementedProductVariantServiceServer()
}

func RegisterProductVariantServiceServer(s grpc.ServiceRegistrar, srv ProductVariantServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductVariantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductVariantService_ServiceDesc, srv)
}

func _ProductVariantService_CreateVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVariantServiceServer).CreateVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVariantService_CreateVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVariantServiceServer).CreateVariant(ctx, req.(*ProductVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVariantService_UpdateVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVariantServiceServer).UpdateVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVariantService_UpdateVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVariantServiceServer).UpdateVariant(ctx, req.(*ProductVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVariantService_DeleteVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVariantServiceServer).DeleteVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVariantService_DeleteVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVariantServiceServer).DeleteVariant(ctx, req.(*DeleteVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVariantService_GetVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVariantServiceServer).GetVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVariantService_GetVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVariantServiceServer).GetVariant(ctx, req.(*VariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVariantService_ListVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVariantServiceServer).ListVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVariantService_ListVariants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVariantServiceServer).ListVariants(ctx, req.(*VariantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductVariantService_ManageStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductVariantServiceServer).ManageStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductVariantService_ManageStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductVariantServiceServer).ManageStock(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductVariantService_ServiceDesc is the grpc.ServiceDesc for ProductVariantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductVariantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProductVariantService",
	HandlerType: (*ProductVariantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVariant",
			Handler:    _ProductVariantService_CreateVariant_Handler,
		},
		{
			MethodName: "UpdateVariant",
			Handler:    _ProductVariantService_UpdateVariant_Handler,
		},
		{
			MethodName: "DeleteVariant",
			Handler:    _ProductVariantService_DeleteVariant_Handler,
		},
		{
			MethodName: "GetVariant",
			Handler:    _ProductVariantService_GetVariant_Handler,
		},
		{
			MethodName: "ListVariants",
			Handler:    _ProductVariantService_ListVariants_Handler,
		},
		{
			MethodName: "ManageStock",
			Handler:    _ProductVariantService_ManageStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_variant.proto",
}
